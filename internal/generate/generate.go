// Package generate implements the code generator.
package generate

import (
	"bytes"
	"fmt"
	"io"
	"path/filepath"

	. "github.com/dave/jennifer/jen" //nolint:revive,stylecheck

	"google.golang.org/protobuf/compiler/protogen"
)

// generatePackage generates for a single package.
func generatePackage(w io.Writer, pkg *Package) error {
	file := NewFile(string(pkg.GoPackageName))
	file.HeaderComment("Code generated by protocgenpgxm. DO NOT EDIT.")

	if err := file.Render(w); err != nil {
		return fmt.Errorf("failed to render: %w", err)
	}

	return nil
}

// Generate generates protohtml code.
func Generate(plugin *protogen.Plugin) (map[string]*Package, error) {
	blueprint, err := preGenPlugin(plugin)
	if err != nil {
		return nil, fmt.Errorf("failed to pre-generate: %w", err)
	}

	pkgs := map[string]*Package{}
	for _, pkg := range blueprint.Packages {
		if pkg.IsEmpty() {
			continue // skip if empty.
		}

		fname := filepath.Join(pkg.Dir, string(pkg.GoPackageName)+"phtml", "phtml.gen.go")
		fdata := bytes.NewBuffer(nil)

		if err := generatePackage(fdata, pkg); err != nil {
			return nil, fmt.Errorf("[%s] failed to generate: %w", pkg.GoPackageName, err)
		}

		pkg.Result = fdata
		pkgs[fname] = pkg
	}

	return pkgs, nil
}
