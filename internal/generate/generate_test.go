package generate_test

import (
	"os"
	"path/filepath"
	"testing"

	"github.com/crewlinker/protohtml-go/internal/generate"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/pluginpb"
)

func TestGenerate(t *testing.T) {
	t.Parallel()
	RegisterFailHandler(Fail)
	RunSpecs(t, "internal/generate")
}

var _ = Describe("generate", func() {
	It("should not generate any files if our options are not used at all", func() {
		AssertTestByName("example_empty", BeNil(), HaveLen(0))
	})

	DescribeTable("table", func(expErr OmegaMatcher, filef func(files Files)) {
		name := CurrentSpecReport().LeafNodeText
		files := AssertTestByName(name, expErr, Not(BeNil()))
		filef(files)
	},
		Entry("example1", BeNil(), AssertFilesWithOnDisk),
	)
})

// AssertFilesWithOnDisk asserts with what is generated by running the generator
// outside of the tests.
func AssertFilesWithOnDisk(files Files) {
	for name, pkg := range files {
		data, err := os.ReadFile(filepath.Join("..", "..", name))
		Expect(err).ToNot(HaveOccurred())
		Expect(pkg.Result.String()).To(Equal(string(data)))
	}
}

// Files provides a more readable type for our tests.
type Files map[string]*generate.Package

// helper for asserting code generation for a test.
func AssertTestByName(name string, expErr OmegaMatcher, expFiles OmegaMatcher) Files {
	opts, req := protogen.Options{}, pluginpb.CodeGeneratorRequest{}

	snapshot, err := os.ReadFile(filepath.Join("..", "..", "examples", name, "v1", "phtml_request.bin"))
	Expect(err).ToNot(HaveOccurred())

	Expect(proto.Unmarshal(snapshot, &req)).To(Succeed())

	plugin, err := opts.New(&req)
	Expect(err).ToNot(HaveOccurred())

	actFiles, actErr := generate.Generate(plugin)
	Expect(actErr).To(expErr)

	Expect(actFiles).To(expFiles)

	return actFiles
}
